plugins {
  id 'application'
  id 'java'
  id 'com.github.hierynomus.license' version '0.14.0'
}

allprojects {
  repositories {
    flatDir {
      dirs "${rootDir}/libs"
    }
    mavenCentral()
    jcenter()

    maven { // for DummyRecognizer
            url "https://oss.sonatype.org/content/repositories/snapshots"
    }
  }

  apply plugin: 'java'
  sourceCompatibility = '1.8'

  apply plugin: 'license'
  licenseMain.onlyIf { project.file('LICENSE ').exists() }
  licenseTest.onlyIf { project.file('LICENSE ').exists() }

  dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
  }
}

dependencies {
  compile subprojects
}

mainClassName = 'com.clt.dialogos.DialogOS'

run {
  systemProperties System.getProperties()
}

def version = '2.0'


task allJavadoc(type: Javadoc) {
    source subprojects.collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}


task clean_all {
    subprojects.each {
        it.afterEvaluate {
            def cleanTask = it.tasks.findByName('clean')
            if (cleanTask) {
                dependsOn(cleanTask)
            }
        }
    }
}

task clientLibrary(type:Jar) {
    manifest {
        attributes 'Implementation-Title': 'DialogOS Client Library',  
        'Implementation-Version': version
    }
    
    baseName = 'dialogos-client-' + version

    // collect dependencies from subprojects
    evaluationDependsOnChildren()
    subprojects.each { p ->
      if( p.name == "ClientInterface" ) {
        p.configurations.each { c ->
          if( c.name == "compile" ) {
            c.dependencies.each { d ->
              if( d.name == "jmdns" ) {
                from { c.files(d).collect { zipTree(it) } }
              }
            }
          }
        }
      }
    }

    // collect Jar files of subprojects
    from { files(["com.clt.base/build/libs/com.clt.base.jar",
                  "com.clt.xml/build/libs/com.clt.xml.jar",
                  "com.clt.script/build/libs/com.clt.script.jar",
                  "ClientInterface/build/libs/ClientInterface.jar"
                 ]).collect { zipTree(it) } }
    
    // generate Jar file
    with jar  
}


